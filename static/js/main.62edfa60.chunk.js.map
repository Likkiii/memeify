{"version":3,"sources":["components/Header.js","components/displayMeme.js","components/canvas.js","components/MemeGen.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","color","Header","classes","useState","message","setMessage","AppBar","position","className","Toolbar","IconButton","edge","aria-label","Typography","variant","src","alt","height","width","htmlFor","type","id","onChange","e","invertedNodes","document","querySelectorAll","body","classList","toggle","forEach","node","displayMeme","props","texts","state","console","log","onSubmit","handleSubmit","map","text","key","name","placeholder","value","handleChange","bind","handleColorChange","borderColor","handleBorderColorChange","onClick","handleRemoveText","handleAddText","handleRandomClick","getElementById","click","handleFileChange","canvas","checkImageHeight","maxHeight","newheight","newwidth","MemeGenerator","setImage","image","url","context","getContext","onload","drawImage","i","length","font","x","y","size","measureText","strokeStyle","strokeText","fillStyle","fillText","event","target","setTimeout","setState","undefined","topText","bottomText","bottomColor","bottomBorderColor","allMemeImgs","Math","floor","window","innerHeight","updateImage","componentDidMount","selectedText","this","Image","fetch","then","response","json","memes","data","preventDefault","push","slice","randNum","random","scope","URL","createObjectURL","files","img","handleChangeBT","Component","App","data-theme","MemeGen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.62edfa60.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport { makeStyles, withTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      color: 'white',\r\n    },\r\n  }));\r\n\r\nfunction Header() {\r\n\r\n    const classes = useStyles();\r\n    const [ message, setMessage ] = useState(false)\r\n\r\n    const switchTheme = (e) => {\r\n        const invertedNodes = document.querySelectorAll('.inverted')\r\n        document.body.classList.toggle('inverted-theme')\r\n        invertedNodes.forEach(node => node.classList.toggle('inverted-theme'))\r\n        setMessage(!message) \r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"static\" className=\"inverted-theme\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    <img \r\n                        src=\"https://upload.wikimedia.org/wikipedia/en/9/9a/Trollface_non-free.png\" \r\n                        // src=\"http://assets.stickpng.com/images/580b585b2edbce24c47b2a2f.png\"\r\n                        alt=\"Problem?\"\r\n                        height=\"50px\"\r\n                        width=\"50px\"\r\n                    />\r\n                </Typography>\r\n                <Typography variant=\"h5\" className={classes.title}>\r\n                    <p>Meme Generator</p>\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                <label className=\"theme-switch\" htmlFor=\"checkbox\">\r\n                    <input type=\"checkbox\" id=\"checkbox\" onChange={switchTheme}/>\r\n                    <div className=\"slider round\"></div>\r\n              </label>\r\n\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nfunction displayMeme(props){\r\n    const {texts} = props.state;\r\n    console.log(texts)\r\n    return (\r\n        <form className=\"meme-form\" onSubmit={ props.handleSubmit } >\r\n            {\r\n                props.state.texts.map(text => (\r\n                    <div>\r\n                        <input\r\n                            className=\"input\"\r\n                            key={text.id}\r\n                            type=\"text\"\r\n                            name={text.text}\r\n                            placeholder=\"Funny text goes here....\"\r\n                            value= {text.text }\r\n                            onChange={ props.handleChange.bind(this, text.id) }\r\n                            />\r\n                        <input\r\n                            className=\"colorPicker\"\r\n                            type=\"color\"\r\n                            name=\"bottomColor\"\r\n                            value={ text.color }\r\n                            onChange={ props.handleColorChange.bind(this, text.id) }\r\n                        />\r\n                        <input\r\n                            className=\"colorPicker\"\r\n                            type=\"color\"\r\n                            name=\"bottomBorderColor\"\r\n                            value={ text.borderColor }\r\n                            onChange={ props.handleBorderColorChange.bind(this, text.id) }\r\n                        />\r\n                    </div>\r\n                ))\r\n            }\r\n            <div className=\"input-control\">\r\n                <button id=\"remove \" className=\"inverted\" onClick={props.handleRemoveText }>-</button>\r\n                <button id=\"add\" className=\"inverted\" onClick={props.handleAddText }>+</button>\r\n            </div>\r\n\r\n            <button type=\"submit\" onClick={ props.handleRandomClick } className=\"inverted\">Random</button>\r\n            <span>or</span>\r\n            <button className=\"cutom-file-upload inverted\" type=\"button\" onClick={() => {\r\n                const input = document.getElementById('file-upload');\r\n                input.click();\r\n            }}>Upload Your Photo</button>\r\n            <input id=\"file-upload\" type=\"file\" onChange={ props.handleFileChange } />\r\n        </form>            \r\n    )\r\n}\r\n\r\nexport default displayMeme","import React from 'react';\n\n\nfunction canvas(props){\n    return (\n        <div className=\"meme\">\n            <center>\n                <canvas \n                    id=\"my-canvas\" \n                    className=\"inverted\" \n                    width=\"568px\" height=\"335px\"\n                    />\n            </center>\n        </div>\n    )\n}\n\nexport default canvas","import React, {Component } from \"react\"\r\nimport DisplayMeme from './displayMeme'\r\nimport Canvas from './canvas'\r\n\r\nconst checkImageHeight = (width, height, maxHeight) => {\r\n    let newheight = height\r\n    let newwidth = width\r\n    if (height>maxHeight){\r\n        let ratio = maxHeight/height\r\n        newwidth = width * ratio\r\n        newheight = maxHeight\r\n    }\r\n    return {newheight, newwidth}\r\n}\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            texts: [\r\n                {\r\n                    id: 0,\r\n                    text: \"Top\",\r\n                    color: \"#000000\",\r\n                    borderColor: \"#FFFFFF\",\r\n                    size: 10,\r\n                    x:250, \r\n                    y:50\r\n                },\r\n                {\r\n                    id: 1,\r\n                    text: \"Bottom\",\r\n                    color: \"#000000\",\r\n                    borderColor: \"#FFFFFF\",\r\n                    size: 10,\r\n                    x:250, \r\n                    y:300\r\n                },\r\n            ],\r\n            context: undefined, \r\n            canvas: undefined,\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            bottomColor: \"#000000\",\r\n            bottomBorderColor: \"#FFFFFF\",\r\n            height: 335,\r\n            width: 568,\r\n            url: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: [],\r\n            image: undefined,\r\n            maxHeight: Math.floor(window.innerHeight*0.8),\r\n            updateImage: false,\r\n            // isDragging: false,\r\n        }\r\n        this.componentDidMount = this.componentDidMount.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleRandomClick = this.handleRandomClick.bind(this)\r\n        this.handleFileChange = this.handleFileChange.bind(this)\r\n        this.handleAddText = this.handleAddText.bind(this)\r\n        this.handleRemoveText = this.handleRemoveText.bind(this)\r\n        this.selectedText = -1;\r\n    }\r\n\r\n    \r\n\r\n    componentDidMount() {\r\n        const { url } = this.state\r\n        var image = new Image()\r\n        image.src = url \r\n        console.log(image.src)\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const { memes } = response.data\r\n            this.setState({ allMemeImgs: memes, image })\r\n        }).then( () => {\r\n            var canvas = document.getElementById(\"my-canvas\")\r\n            var context = canvas.getContext(\"2d\");\r\n            this.setState({\r\n                context,\r\n                canvas,\r\n            })\r\n            console.log(this.state);\r\n            // canvas.onmousedown = function(evt){\r\n            //     evt.preventDefault();\r\n            //     this.handleMouseDown(evt);\r\n            // }\r\n            // canvas.onmousemove = function(evt){\r\n            //     evt.preventDefault();\r\n            //     this.handleMouseMove(evt);\r\n            // }\r\n         \r\n            // canvas.onmouseup = function(evt){\r\n            //     evt.preventDefault();\r\n            //     this.handleMouseUp(evt);\r\n            // }\r\n          \r\n            // canvas.onmouseout = function(evt){\r\n            //     evt.preventDefault();\r\n            //     this.handleMouseOut(evt);\r\n            // }\r\n        })\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n        this.setImage()\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // textHittest = (x, y, textIndex) => {\r\n    //     var text = this.texts[textIndex];\r\n    //     return (x >= text.x && x <= text.x + text.width && y >= text.y - text.height && y <= text.y);\r\n    // }\r\n\r\n    // handleMouseDown(e){\r\n    //     e.preventDefault();\r\n    //     var startX, startY;\r\n    //     const { offsetY, offsetX } = this.state; \r\n    //     startX = parseInt(e.clientX - offsetX);\r\n    //     startY = parseInt(e.clientY - offsetY);\r\n    //     // Put your mousedown stuff here\r\n    //     for (var i = 0; i < this.texts.length; i++) {\r\n    //         if (this.textHittest(startX, startY, i)) {\r\n    //             this.selectedText = i;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // handleMouseMove(e){\r\n    //     e.preventDefault()\r\n    //     if (this.selectedText < 0) {\r\n    //         return;\r\n    //     }\r\n    //     var canvasOffset = document.getElementById(\"my-canvas\").offset();\r\n    //     var offsetX = canvasOffset.left;\r\n    //     var offsetY = canvasOffset.top;\r\n    //     var mouseX, mouseY, startX, startY\r\n    //     mouseX = parseInt(e.clientX - offsetX);\r\n    //     mouseY = parseInt(e.clientY - offsetY);\r\n    //     // Put your mousemove stuff here\r\n    //     var dx = mouseX - startX;\r\n    //     var dy = mouseY - startY;\r\n    //     startX = mouseX;\r\n    //     startY = mouseY;\r\n    \r\n    //     var text = this.state.texts[this.selectedText];\r\n    //     text.x += dx;\r\n    //     text.y += dy;\r\n    //     this.setImage()\r\n    // }\r\n\r\n    // handleMouseUp(e){\r\n    //     e.preventDefault();\r\n    //     this.selectedText = -1;\r\n    // }\r\n    // handleMouseOut = (e) => {\r\n    //     e.preventDefault();\r\n    //     this.selectedText = -1;\r\n    // }\r\n\r\n    setImage = () => {\r\n        console.log(this.state);\r\n        const { image, texts, height, width, url, maxHeight } = this.state\r\n        var canvas = document.getElementById(\"my-canvas\")\r\n        var context = canvas.getContext(\"2d\");\r\n        // context.clearRect(0, 0, canvas.width, canvas.height);\r\n        image.src = url;\r\n        const { newheight, newwidth } = checkImageHeight(width, height, maxHeight);\r\n        image.onload = () => {\r\n            canvas.height = newheight\r\n            canvas.width = newwidth\r\n            context.drawImage(image, 0, 0, width, height, 0, 0, newwidth, newheight);\r\n            for (var i = 0; i < texts.length; i++) {\r\n                context.font = \"2em impact, sans-serif\"\r\n                const { text, color, borderColor, x, y, size } = texts[i];\r\n                const topWidth = context.measureText(text).width\r\n                context.strokeStyle = borderColor\r\n                context.strokeText(text, x, y)\r\n                context.fillStyle = color\r\n                context.fillText(text, x, y)\r\n            }\r\n        }\r\n    }\r\n    \r\n    handleColorChange = (i, event) => {\r\n        const { name, value } = event.target\r\n\r\n        setTimeout(() => {\r\n            var texts = [...this.state.texts];\r\n            texts[i].color = value; \r\n\r\n            this.setState({ [name]: value })\r\n        }, 250);\r\n    }\r\n\r\n    handleBorderColorChange = (i, event) => {\r\n        const { name, value } = event.target\r\n\r\n        setTimeout(() => {\r\n            var texts = [...this.state.texts];\r\n            texts[i].borderColor = value; \r\n\r\n            this.setState({ [name]: value })\r\n        }, 250);\r\n    }\r\n\r\n    handleChange(i, event) {\r\n        event.preventDefault()\r\n        const { value } = event.target\r\n        var texts = [...this.state.texts];\r\n        texts[i].text = value;\r\n        this.setState({ texts })\r\n    }\r\n\r\n    handleAddText(event){\r\n        event.preventDefault()\r\n        var texts = [...this.state.texts]\r\n        texts.push({\r\n            id:texts.length,\r\n            text: \"\",\r\n            color: \"#000000\",\r\n            borderColor: \"#FFFFFF\",\r\n            size: 10,\r\n            x:50, \r\n            y:50\r\n        })\r\n        this.setState({ texts });\r\n    }\r\n\r\n    handleRemoveText(event){\r\n        event.preventDefault()\r\n        var texts = this.state.texts.slice(0,-1);\r\n        this.setState({ texts });\r\n    }\r\n\r\n    handleRandomClick(event) {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const { url, width, height } = this.state.allMemeImgs[randNum]\r\n        this.setState({ url: url, width: width, height: height, updateImage: true})\r\n        console.log(this.state)\r\n    }\r\n\r\n    handleFileChange(event) {\r\n        const scope = this;\r\n        const url = window.URL.createObjectURL(event.target.files[0])\r\n        const img = new Image();\r\n        img.onload = function() {\r\n            const { newheight, newwidth } = checkImageHeight(this.width, this.height)\r\n            scope.setState({ url, width: newwidth, height: newheight, updateImage: true })\r\n        }\r\n        img.src = url;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"memeRoot\">\r\n                <DisplayMeme \r\n                    state={ this.state } \r\n                    handleRandomClick={ this.handleRandomClick } \r\n                    handleChange={ this.handleChange }\r\n                    handleChangeBT={ this.handleChangeBT }\r\n                    handleColorChange={ this.handleColorChange }\r\n                    handleBorderColorChange={ this.handleBorderColorChange }\r\n                    handleFileChange={ this.handleFileChange } \r\n                    handleAddText={ this.handleAddText }\r\n                    handleRemoveText={ this.handleRemoveText }\r\n                />\r\n                <Canvas />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from \"react\"\r\nimport Header from \"./components/Header\"\r\nimport MemeGenerator from \"./components/MemeGen\"\r\nimport './App.css'\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"app-container\" data-theme=\"dark\">\r\n            <Header />\r\n            <MemeGenerator />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}